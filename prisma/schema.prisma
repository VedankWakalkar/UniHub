// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  role             String     
  payment          PaymentHistory[]  // Added PaymentHistory model
  documentHistory  DocumentHistory[]
  foodOrderHistory FoodOrderHistory[]
  documents        Document[]
}

model PaymentHistory {
  id          String       @id @default(uuid())
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id])
  amount      Float
  status      PaymentStatus
  description String?
  createdAt   DateTime     @default(now())
}

model Document {
  id           String       @id @default(uuid())
  studentId    String
  student      Student      @relation(fields: [studentId], references: [id])
  documentType String
  copies       Int
  color        Boolean
  oneSidePrint Boolean
  token        String       @unique
  payment      Float
  orderTrack   PrintStatus  @default(PENDING)
  accessories  Accessories?
  createdAt    DateTime     @default(now())
}

enum PrintStatus {
  PENDING
  PRINTING
  COMPLETED
  CANCELED
}

model Accessories {
  id         String   @id @default(uuid())
  documentId String   @unique
  document   Document @relation(fields: [documentId], references: [id]) // Added reverse relation
  catalogCC  String
  payment    Float
  orders     Json
}

model Canteen {
  id               String            @id @default(uuid())
  catalogFood      String
  token            String            @unique
  foodItems        Json
  orderTrack       OrderStatus       @default(PENDING)
  timing           DateTime
  payment          Float
  tableReservation TableReservation?
  createdAt        DateTime          @default(now())
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELED
}

model TableReservation {
  id        String   @id @default(uuid())
  tableNo   Int
  seats     Int
  timeSlot  DateTime
  canteenId String   @unique // Added @unique to fix one-to-one relation
  canteen   Canteen  @relation(fields: [canteenId], references: [id])
}

model DocumentHistory {
  id           String    @id @default(uuid())
  studentId    String
  student      Student   @relation(fields: [studentId], references: [id])
  documentType String
  requestTime  DateTime
  receivedTime DateTime?
}

model FoodOrderHistory {
  id           String    @id @default(uuid())
  studentId    String
  student      Student   @relation(fields: [studentId], references: [id])
  itemQuantity Json
  requestTime  DateTime
  receivedTime DateTime?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}